#include "fls/cor/prm/bitpack.hpp" // for pack
#include <cstdint>                 // for uint64_t, uint32_t, uint16_t, uint8_t
#include <sys/cdefs.h>             // for __restrict
namespace fastlanes { namespace bitpack {
void pack_1bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 1U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 3U;
		src = *(in + 128 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 128 * 5 + i);
		tmp |= src << 5U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out -= 0;
	}
}
void pack_2bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 2U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 4 + i);
		tmp = src;
		src = *(in + 128 * 5 + i);
		tmp |= src << 2U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out -= 128;
	}
}
void pack_3bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 3U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 1U;
		src = *(in + 128 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 128 * 5 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 5 + i);
		tmp = src >> 1U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out -= 256;
	}
}
void pack_4bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 2 + i);
		tmp = src;
		src = *(in + 128 * 3 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 4 + i);
		tmp = src;
		src = *(in + 128 * 5 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 6 + i);
		tmp = src;
		src = *(in + 128 * 7 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out -= 384;
	}
}
void pack_5bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 1 + i);
		tmp = src >> 3U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 3 + i);
		tmp = src >> 1U;
		src = *(in + 128 * 4 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 128 * 5 + i);
		tmp |= src << 1U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out -= 512;
	}
}
void pack_6bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 1 + i);
		tmp = src >> 2U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 4 + i);
		tmp = src;
		src = *(in + 128 * 5 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 5 + i);
		tmp = src >> 2U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out -= 640;
	}
}
void pack_7bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src = *(in + 128 * 0 + i);
		tmp = src;
		src = *(in + 128 * 1 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 1 + i);
		tmp = src >> 1U;
		src = *(in + 128 * 2 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 128 * 3 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 3 + i);
		tmp = src >> 3U;
		src = *(in + 128 * 4 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 128 * 5 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 5 + i);
		tmp = src >> 5U;
		src = *(in + 128 * 6 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 128;
		src = *(in + 128 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 128 * 7 + i);
		tmp |= src << 1U;
		*(out + i) = tmp;
		out -= 768;
	}
}
void pack_8bit_8simdWidth(uint8_t* __restrict in, uint8_t* __restrict out) {
	uint8_t tmp = 0U;
	uint8_t src;
	for (int i = 0; i < 128; i++) {
		src        = *(in + 128 * 0 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 1 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 2 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 3 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 4 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 5 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 6 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 128;
		src        = *(in + 128 * 7 + i);
		tmp        = src;
		*(out + i) = tmp;
		out -= 896;
	}
}
void pack_1bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 5U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 7U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 9U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 10U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 11U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 13U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 14U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out -= 0;
	}
}
void pack_2bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 10U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 12U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 10U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 12U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out -= 64;
	}
}
void pack_3bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 9U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 5U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 11U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 7U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 10U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out -= 128;
	}
}
void pack_4bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src;
		src = *(in + 64 * 5 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src;
		src = *(in + 64 * 13 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out -= 192;
	}
}
void pack_5bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 5U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 10U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 9U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 7U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out -= 256;
	}
}
void pack_6bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out -= 320;
	}
}
void pack_7bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 7U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 5U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 5U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out -= 384;
	}
}
void pack_8bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src;
		src = *(in + 64 * 3 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src;
		src = *(in + 64 * 5 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src;
		src = *(in + 64 * 7 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src;
		src = *(in + 64 * 11 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src;
		src = *(in + 64 * 13 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src;
		src = *(in + 64 * 15 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out -= 448;
	}
}
void pack_9bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 7U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 5U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 7 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 5U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out -= 512;
	}
}
void pack_10bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out -= 576;
	}
}
void pack_11bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 5U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 10U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 9U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 7 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 3U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 7U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out -= 640;
	}
}
void pack_12bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src;
		src = *(in + 64 * 5 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src;
		src = *(in + 64 * 13 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out -= 704;
	}
}
void pack_13bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 9U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 1U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 7 + i);
		tmp = src >> 5U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 11U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 7U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 10U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out -= 768;
	}
}
void pack_14bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 10U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 12U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src;
		src = *(in + 64 * 9 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 10U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 12U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out -= 832;
	}
}
void pack_15bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src = *(in + 64 * 0 + i);
		tmp = src;
		src = *(in + 64 * 1 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 1 + i);
		tmp = src >> 1U;
		src = *(in + 64 * 2 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 64 * 3 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 3 + i);
		tmp = src >> 3U;
		src = *(in + 64 * 4 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 64 * 5 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 5 + i);
		tmp = src >> 5U;
		src = *(in + 64 * 6 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 64 * 7 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 7 + i);
		tmp = src >> 7U;
		src = *(in + 64 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 64 * 9 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 9 + i);
		tmp = src >> 9U;
		src = *(in + 64 * 10 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 10 + i);
		tmp = src >> 10U;
		src = *(in + 64 * 11 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 11 + i);
		tmp = src >> 11U;
		src = *(in + 64 * 12 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 64 * 13 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 13 + i);
		tmp = src >> 13U;
		src = *(in + 64 * 14 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 64;
		src = *(in + 64 * 14 + i);
		tmp = src >> 14U;
		src = *(in + 64 * 15 + i);
		tmp |= src << 1U;
		*(out + i) = tmp;
		out -= 896;
	}
}
void pack_16bit_16simdWidth(uint16_t* __restrict in, uint16_t* __restrict out) {
	uint16_t tmp = 0U;
	uint16_t src;
	for (int i = 0; i < 64; i++) {
		src        = *(in + 64 * 0 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 1 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 2 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 3 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 4 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 5 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 6 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 7 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 8 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 9 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 10 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 11 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 12 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 13 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 14 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 64;
		src        = *(in + 64 * 15 + i);
		tmp        = src;
		*(out + i) = tmp;
		out -= 960;
	}
}
void pack_1bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 21U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 23U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 25U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 26U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 27U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 28U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 29U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 30U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out -= 0;
	}
}
void pack_2bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 26U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 28U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 26U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 28U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out -= 32;
	}
}
void pack_3bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 21U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 27U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 25U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 28U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 23U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 26U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out -= 64;
	}
}
void pack_4bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out -= 96;
	}
}
void pack_5bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 25U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 23U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 21U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 26U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out -= 128;
	}
}
void pack_6bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out -= 160;
	}
}
void pack_7bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 21U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 23U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out -= 192;
	}
}
void pack_8bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src;
		src = *(in + 32 * 5 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src;
		src = *(in + 32 * 13 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src;
		src = *(in + 32 * 21 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src;
		src = *(in + 32 * 29 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out -= 224;
	}
}
void pack_9bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 22U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 21U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out -= 256;
	}
}
void pack_10bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out -= 288;
	}
}
void pack_11bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 19U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 20U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out -= 320;
	}
}
void pack_12bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out -= 352;
	}
}
void pack_13bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 17U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 18U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out -= 384;
	}
}
void pack_14bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out -= 416;
	}
}
void pack_15bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 15U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out -= 448;
	}
}
void pack_16bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src;
		src = *(in + 32 * 3 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src;
		src = *(in + 32 * 5 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src;
		src = *(in + 32 * 7 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src;
		src = *(in + 32 * 11 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src;
		src = *(in + 32 * 13 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src;
		src = *(in + 32 * 15 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src;
		src = *(in + 32 * 19 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src;
		src = *(in + 32 * 21 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src;
		src = *(in + 32 * 23 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src;
		src = *(in + 32 * 27 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src;
		src = *(in + 32 * 29 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src;
		src = *(in + 32 * 31 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out -= 480;
	}
}
void pack_17bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 14U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 13U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out -= 512;
	}
}
void pack_18bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out -= 544;
	}
}
void pack_19bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 11U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out -= 576;
	}
}
void pack_20bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out -= 608;
	}
}
void pack_21bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 10U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 9U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out -= 640;
	}
}
void pack_22bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out -= 672;
	}
}
void pack_23bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 21U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 7U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out -= 704;
	}
}
void pack_24bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src;
		src = *(in + 32 * 5 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src;
		src = *(in + 32 * 13 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src;
		src = *(in + 32 * 21 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src;
		src = *(in + 32 * 29 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out -= 736;
	}
}
void pack_25bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 21U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 5U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 23U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 6U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out -= 768;
	}
}
void pack_26bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out -= 800;
	}
}
void pack_27bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 25U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 23U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 21U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 26U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 3U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out -= 832;
	}
}
void pack_28bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src;
		src = *(in + 32 * 9 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src;
		src = *(in + 32 * 25 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out -= 864;
	}
}
void pack_29bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 21U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 27U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 25U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 28U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 1U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 23U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 26U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out -= 896;
	}
}
void pack_30bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 26U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 28U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src;
		src = *(in + 32 * 17 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 26U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 28U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out -= 928;
	}
}
void pack_31bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src = *(in + 32 * 0 + i);
		tmp = src;
		src = *(in + 32 * 1 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 1 + i);
		tmp = src >> 1U;
		src = *(in + 32 * 2 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 32 * 3 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 3 + i);
		tmp = src >> 3U;
		src = *(in + 32 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 32 * 5 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 5 + i);
		tmp = src >> 5U;
		src = *(in + 32 * 6 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 32 * 7 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 7 + i);
		tmp = src >> 7U;
		src = *(in + 32 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 32 * 9 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 9 + i);
		tmp = src >> 9U;
		src = *(in + 32 * 10 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 10 + i);
		tmp = src >> 10U;
		src = *(in + 32 * 11 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 11 + i);
		tmp = src >> 11U;
		src = *(in + 32 * 12 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 32 * 13 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 13 + i);
		tmp = src >> 13U;
		src = *(in + 32 * 14 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 14 + i);
		tmp = src >> 14U;
		src = *(in + 32 * 15 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 15 + i);
		tmp = src >> 15U;
		src = *(in + 32 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 32 * 17 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 17 + i);
		tmp = src >> 17U;
		src = *(in + 32 * 18 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 18 + i);
		tmp = src >> 18U;
		src = *(in + 32 * 19 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 19 + i);
		tmp = src >> 19U;
		src = *(in + 32 * 20 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 20 + i);
		tmp = src >> 20U;
		src = *(in + 32 * 21 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 21 + i);
		tmp = src >> 21U;
		src = *(in + 32 * 22 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 22 + i);
		tmp = src >> 22U;
		src = *(in + 32 * 23 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 23 + i);
		tmp = src >> 23U;
		src = *(in + 32 * 24 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 32 * 25 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 25 + i);
		tmp = src >> 25U;
		src = *(in + 32 * 26 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 26 + i);
		tmp = src >> 26U;
		src = *(in + 32 * 27 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 27 + i);
		tmp = src >> 27U;
		src = *(in + 32 * 28 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 28 + i);
		tmp = src >> 28U;
		src = *(in + 32 * 29 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 29 + i);
		tmp = src >> 29U;
		src = *(in + 32 * 30 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 32;
		src = *(in + 32 * 30 + i);
		tmp = src >> 30U;
		src = *(in + 32 * 31 + i);
		tmp |= src << 1U;
		*(out + i) = tmp;
		out -= 960;
	}
}
void pack_32bit_32simdWidth(uint32_t* __restrict in, uint32_t* __restrict out) {
	uint32_t tmp = 0U;
	uint32_t src;
	for (int i = 0; i < 32; i++) {
		src        = *(in + 32 * 0 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 1 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 2 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 3 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 4 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 5 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 6 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 7 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 8 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 9 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 10 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 11 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 12 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 13 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 14 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 15 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 16 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 17 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 18 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 19 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 20 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 21 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 22 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 23 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 24 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 25 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 26 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 27 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 28 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 29 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 30 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 32;
		src        = *(in + 32 * 31 + i);
		tmp        = src;
		*(out + i) = tmp;
		out -= 992;
	}
}
void pack_1bit_16simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 53U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 55U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 57U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 58U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 59U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 60U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 61U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 62U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out -= 0;
	}
}
void pack_2bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 58U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 60U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 58U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 60U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out -= 16;
	}
}
void pack_3bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 57U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 60U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 53U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 59U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 55U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 58U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out -= 32;
	}
}
void pack_4bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out -= 48;
	}
}
void pack_5bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 55U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 57U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 53U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 58U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out -= 64;
	}
}
void pack_6bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out -= 80;
	}
}
void pack_7bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 55U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 53U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out -= 96;
	}
}
void pack_8bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out -= 112;
	}
}
void pack_9bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 54U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 53U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out -= 128;
	}
}
void pack_10bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out -= 144;
	}
}
void pack_11bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 52U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 51U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out -= 160;
	}
}
void pack_12bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out -= 176;
	}
}
void pack_13bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 49U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 50U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out -= 192;
	}
}
void pack_14bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out -= 208;
	}
}
void pack_15bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 47U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out -= 224;
	}
}
void pack_16bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src;
		src = *(in + 16 * 5 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src;
		src = *(in + 16 * 13 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src;
		src = *(in + 16 * 21 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src;
		src = *(in + 16 * 29 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src;
		src = *(in + 16 * 37 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src;
		src = *(in + 16 * 45 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src;
		src = *(in + 16 * 53 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src;
		src = *(in + 16 * 61 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out -= 240;
	}
}
void pack_17bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 46U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 45U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out -= 256;
	}
}
void pack_18bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out -= 272;
	}
}
void pack_19bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 43U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 44U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out -= 288;
	}
}
void pack_20bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out -= 304;
	}
}
void pack_21bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 42U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 41U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out -= 320;
	}
}
void pack_22bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out -= 336;
	}
}
void pack_23bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 39U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out -= 352;
	}
}
void pack_24bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out -= 368;
	}
}
void pack_25bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 38U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 37U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out -= 384;
	}
}
void pack_26bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out -= 400;
	}
}
void pack_27bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 35U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 36U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out -= 416;
	}
}
void pack_28bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out -= 432;
	}
}
void pack_29bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 34U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 33U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out -= 448;
	}
}
void pack_30bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out -= 464;
	}
}
void pack_31bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 31U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out -= 480;
	}
}
void pack_32bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src;
		src = *(in + 16 * 3 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src;
		src = *(in + 16 * 5 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src;
		src = *(in + 16 * 7 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src;
		src = *(in + 16 * 11 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src;
		src = *(in + 16 * 13 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src;
		src = *(in + 16 * 15 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src;
		src = *(in + 16 * 19 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src;
		src = *(in + 16 * 21 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src;
		src = *(in + 16 * 23 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src;
		src = *(in + 16 * 27 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src;
		src = *(in + 16 * 29 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src;
		src = *(in + 16 * 31 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src;
		src = *(in + 16 * 35 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src;
		src = *(in + 16 * 37 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src;
		src = *(in + 16 * 39 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src;
		src = *(in + 16 * 43 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src;
		src = *(in + 16 * 45 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src;
		src = *(in + 16 * 47 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src;
		src = *(in + 16 * 51 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src;
		src = *(in + 16 * 53 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src;
		src = *(in + 16 * 55 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src;
		src = *(in + 16 * 59 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src;
		src = *(in + 16 * 61 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src;
		src = *(in + 16 * 63 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out -= 496;
	}
}
void pack_33bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 30U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 29U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out -= 512;
	}
}
void pack_34bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out -= 528;
	}
}
void pack_35bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 27U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out -= 544;
	}
}
void pack_36bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out -= 560;
	}
}
void pack_37bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 26U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 25U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out -= 576;
	}
}
void pack_38bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out -= 592;
	}
}
void pack_39bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 23U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out -= 608;
	}
}
void pack_40bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out -= 624;
	}
}
void pack_41bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 21U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 22U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out -= 640;
	}
}
void pack_42bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out -= 656;
	}
}
void pack_43bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 19U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out -= 672;
	}
}
void pack_44bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out -= 688;
	}
}
void pack_45bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 18U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 17U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out -= 704;
	}
}
void pack_46bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out -= 720;
	}
}
void pack_47bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 15U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out -= 736;
	}
}
void pack_48bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src;
		src = *(in + 16 * 5 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src;
		src = *(in + 16 * 13 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src;
		src = *(in + 16 * 21 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src;
		src = *(in + 16 * 29 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src;
		src = *(in + 16 * 37 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src;
		src = *(in + 16 * 45 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src;
		src = *(in + 16 * 53 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src;
		src = *(in + 16 * 61 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out -= 752;
	}
}
void pack_49bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 13U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 14U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out -= 768;
	}
}
void pack_50bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out -= 784;
	}
}
void pack_51bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 11U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out -= 800;
	}
}
void pack_52bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out -= 816;
	}
}
void pack_53bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 9U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 10U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out -= 832;
	}
}
void pack_54bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out -= 848;
	}
}
void pack_55bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 53U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 7U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out -= 864;
	}
}
void pack_56bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src;
		src = *(in + 16 * 9 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src;
		src = *(in + 16 * 25 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src;
		src = *(in + 16 * 41 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src;
		src = *(in + 16 * 57 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out -= 880;
	}
}
void pack_57bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 55U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 53U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 5U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 6U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out -= 896;
	}
}
void pack_58bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out -= 912;
	}
}
void pack_59bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 55U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 4U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 3U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 57U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 53U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 58U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out -= 928;
	}
}
void pack_60bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src;
		src = *(in + 16 * 17 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src;
		src = *(in + 16 * 49 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out -= 944;
	}
}
void pack_61bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 57U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 60U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 1U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 53U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 59U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 2U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 55U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 58U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out -= 960;
	}
}
void pack_62bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 58U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 60U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src;
		src = *(in + 16 * 33 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 58U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 60U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out -= 976;
	}
}
void pack_63bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src = *(in + 16 * 0 + i);
		tmp = src;
		src = *(in + 16 * 1 + i);
		tmp |= src << 63U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 1 + i);
		tmp = src >> 1U;
		src = *(in + 16 * 2 + i);
		tmp |= src << 62U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 2 + i);
		tmp = src >> 2U;
		src = *(in + 16 * 3 + i);
		tmp |= src << 61U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 3 + i);
		tmp = src >> 3U;
		src = *(in + 16 * 4 + i);
		tmp |= src << 60U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 4 + i);
		tmp = src >> 4U;
		src = *(in + 16 * 5 + i);
		tmp |= src << 59U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 5 + i);
		tmp = src >> 5U;
		src = *(in + 16 * 6 + i);
		tmp |= src << 58U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 6 + i);
		tmp = src >> 6U;
		src = *(in + 16 * 7 + i);
		tmp |= src << 57U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 7 + i);
		tmp = src >> 7U;
		src = *(in + 16 * 8 + i);
		tmp |= src << 56U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 8 + i);
		tmp = src >> 8U;
		src = *(in + 16 * 9 + i);
		tmp |= src << 55U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 9 + i);
		tmp = src >> 9U;
		src = *(in + 16 * 10 + i);
		tmp |= src << 54U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 10 + i);
		tmp = src >> 10U;
		src = *(in + 16 * 11 + i);
		tmp |= src << 53U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 11 + i);
		tmp = src >> 11U;
		src = *(in + 16 * 12 + i);
		tmp |= src << 52U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 12 + i);
		tmp = src >> 12U;
		src = *(in + 16 * 13 + i);
		tmp |= src << 51U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 13 + i);
		tmp = src >> 13U;
		src = *(in + 16 * 14 + i);
		tmp |= src << 50U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 14 + i);
		tmp = src >> 14U;
		src = *(in + 16 * 15 + i);
		tmp |= src << 49U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 15 + i);
		tmp = src >> 15U;
		src = *(in + 16 * 16 + i);
		tmp |= src << 48U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 16 + i);
		tmp = src >> 16U;
		src = *(in + 16 * 17 + i);
		tmp |= src << 47U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 17 + i);
		tmp = src >> 17U;
		src = *(in + 16 * 18 + i);
		tmp |= src << 46U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 18 + i);
		tmp = src >> 18U;
		src = *(in + 16 * 19 + i);
		tmp |= src << 45U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 19 + i);
		tmp = src >> 19U;
		src = *(in + 16 * 20 + i);
		tmp |= src << 44U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 20 + i);
		tmp = src >> 20U;
		src = *(in + 16 * 21 + i);
		tmp |= src << 43U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 21 + i);
		tmp = src >> 21U;
		src = *(in + 16 * 22 + i);
		tmp |= src << 42U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 22 + i);
		tmp = src >> 22U;
		src = *(in + 16 * 23 + i);
		tmp |= src << 41U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 23 + i);
		tmp = src >> 23U;
		src = *(in + 16 * 24 + i);
		tmp |= src << 40U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 24 + i);
		tmp = src >> 24U;
		src = *(in + 16 * 25 + i);
		tmp |= src << 39U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 25 + i);
		tmp = src >> 25U;
		src = *(in + 16 * 26 + i);
		tmp |= src << 38U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 26 + i);
		tmp = src >> 26U;
		src = *(in + 16 * 27 + i);
		tmp |= src << 37U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 27 + i);
		tmp = src >> 27U;
		src = *(in + 16 * 28 + i);
		tmp |= src << 36U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 28 + i);
		tmp = src >> 28U;
		src = *(in + 16 * 29 + i);
		tmp |= src << 35U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 29 + i);
		tmp = src >> 29U;
		src = *(in + 16 * 30 + i);
		tmp |= src << 34U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 30 + i);
		tmp = src >> 30U;
		src = *(in + 16 * 31 + i);
		tmp |= src << 33U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 31 + i);
		tmp = src >> 31U;
		src = *(in + 16 * 32 + i);
		tmp |= src << 32U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 32 + i);
		tmp = src >> 32U;
		src = *(in + 16 * 33 + i);
		tmp |= src << 31U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 33 + i);
		tmp = src >> 33U;
		src = *(in + 16 * 34 + i);
		tmp |= src << 30U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 34 + i);
		tmp = src >> 34U;
		src = *(in + 16 * 35 + i);
		tmp |= src << 29U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 35 + i);
		tmp = src >> 35U;
		src = *(in + 16 * 36 + i);
		tmp |= src << 28U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 36 + i);
		tmp = src >> 36U;
		src = *(in + 16 * 37 + i);
		tmp |= src << 27U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 37 + i);
		tmp = src >> 37U;
		src = *(in + 16 * 38 + i);
		tmp |= src << 26U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 38 + i);
		tmp = src >> 38U;
		src = *(in + 16 * 39 + i);
		tmp |= src << 25U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 39 + i);
		tmp = src >> 39U;
		src = *(in + 16 * 40 + i);
		tmp |= src << 24U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 40 + i);
		tmp = src >> 40U;
		src = *(in + 16 * 41 + i);
		tmp |= src << 23U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 41 + i);
		tmp = src >> 41U;
		src = *(in + 16 * 42 + i);
		tmp |= src << 22U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 42 + i);
		tmp = src >> 42U;
		src = *(in + 16 * 43 + i);
		tmp |= src << 21U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 43 + i);
		tmp = src >> 43U;
		src = *(in + 16 * 44 + i);
		tmp |= src << 20U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 44 + i);
		tmp = src >> 44U;
		src = *(in + 16 * 45 + i);
		tmp |= src << 19U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 45 + i);
		tmp = src >> 45U;
		src = *(in + 16 * 46 + i);
		tmp |= src << 18U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 46 + i);
		tmp = src >> 46U;
		src = *(in + 16 * 47 + i);
		tmp |= src << 17U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 47 + i);
		tmp = src >> 47U;
		src = *(in + 16 * 48 + i);
		tmp |= src << 16U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 48 + i);
		tmp = src >> 48U;
		src = *(in + 16 * 49 + i);
		tmp |= src << 15U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 49 + i);
		tmp = src >> 49U;
		src = *(in + 16 * 50 + i);
		tmp |= src << 14U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 50 + i);
		tmp = src >> 50U;
		src = *(in + 16 * 51 + i);
		tmp |= src << 13U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 51 + i);
		tmp = src >> 51U;
		src = *(in + 16 * 52 + i);
		tmp |= src << 12U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 52 + i);
		tmp = src >> 52U;
		src = *(in + 16 * 53 + i);
		tmp |= src << 11U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 53 + i);
		tmp = src >> 53U;
		src = *(in + 16 * 54 + i);
		tmp |= src << 10U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 54 + i);
		tmp = src >> 54U;
		src = *(in + 16 * 55 + i);
		tmp |= src << 9U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 55 + i);
		tmp = src >> 55U;
		src = *(in + 16 * 56 + i);
		tmp |= src << 8U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 56 + i);
		tmp = src >> 56U;
		src = *(in + 16 * 57 + i);
		tmp |= src << 7U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 57 + i);
		tmp = src >> 57U;
		src = *(in + 16 * 58 + i);
		tmp |= src << 6U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 58 + i);
		tmp = src >> 58U;
		src = *(in + 16 * 59 + i);
		tmp |= src << 5U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 59 + i);
		tmp = src >> 59U;
		src = *(in + 16 * 60 + i);
		tmp |= src << 4U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 60 + i);
		tmp = src >> 60U;
		src = *(in + 16 * 61 + i);
		tmp |= src << 3U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 61 + i);
		tmp = src >> 61U;
		src = *(in + 16 * 62 + i);
		tmp |= src << 2U;
		*(out + i) = tmp;
		out += 16;
		src = *(in + 16 * 62 + i);
		tmp = src >> 62U;
		src = *(in + 16 * 63 + i);
		tmp |= src << 1U;
		*(out + i) = tmp;
		out -= 992;
	}
}
void pack_64bit_64simdWidth(uint64_t* __restrict in, uint64_t* __restrict out) {
	uint64_t tmp = 0U;
	uint64_t src;
	for (int i = 0; i < 16; i++) {
		src        = *(in + 16 * 0 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 1 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 2 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 3 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 4 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 5 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 6 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 7 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 8 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 9 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 10 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 11 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 12 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 13 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 14 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 15 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 16 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 17 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 18 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 19 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 20 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 21 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 22 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 23 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 24 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 25 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 26 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 27 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 28 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 29 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 30 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 31 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 32 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 33 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 34 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 35 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 36 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 37 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 38 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 39 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 40 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 41 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 42 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 43 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 44 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 45 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 46 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 47 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 48 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 49 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 50 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 51 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 52 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 53 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 54 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 55 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 56 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 57 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 58 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 59 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 60 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 61 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 62 + i);
		tmp        = src;
		*(out + i) = tmp;
		out += 16;
		src        = *(in + 16 * 63 + i);
		tmp        = src;
		*(out + i) = tmp;
		out -= 1008;
	}
}

void Compress08(Vec& src_vec, Vec& des_vec, CompressState& compress_state) {
	uint8_t* __restrict in  = 0;
	uint8_t* __restrict out = 0;
	int b                   = 0;

	switch (b) {
	case 1:
		pack_1bit_8simdWidth(in, out);
		break;
	case 2:
		pack_2bit_8simdWidth(in, out);
		break;
	case 3:
		pack_3bit_8simdWidth(in, out);
		break;
	case 4:
		pack_4bit_8simdWidth(in, out);
		break;
	case 5:
		pack_5bit_8simdWidth(in, out);
		break;
	case 6:
		pack_6bit_8simdWidth(in, out);
		break;
	case 7:
		pack_7bit_8simdWidth(in, out);
		break;
	case 8:
		pack_8bit_8simdWidth(in, out);
		break;
	}
}

void Compress16(Vec& src_vec, Vec& des_vec, CompressState& compress_state) {
	uint16_t* __restrict in  = 0;
	uint16_t* __restrict out = 0;
	int b                    = 0;

	switch (b) {
	case 1:
		pack_1bit_16simdWidth(in, out);
		break;
	case 2:
		pack_2bit_16simdWidth(in, out);
		break;
	case 3:
		pack_3bit_16simdWidth(in, out);
		break;
	case 4:
		pack_4bit_16simdWidth(in, out);
		break;
	case 5:
		pack_5bit_16simdWidth(in, out);
		break;
	case 6:
		pack_6bit_16simdWidth(in, out);
		break;
	case 7:
		pack_7bit_16simdWidth(in, out);
		break;
	case 8:
		pack_8bit_16simdWidth(in, out);
		break;
	case 9:
		pack_9bit_16simdWidth(in, out);
		break;
	case 10:
		pack_10bit_16simdWidth(in, out);
		break;
	case 11:
		pack_11bit_16simdWidth(in, out);
		break;
	case 12:
		pack_12bit_16simdWidth(in, out);
		break;
	case 13:
		pack_13bit_16simdWidth(in, out);
		break;
	case 14:
		pack_14bit_16simdWidth(in, out);
		break;
	case 15:
		pack_15bit_16simdWidth(in, out);
		break;
	case 16:
		pack_16bit_16simdWidth(in, out);
		break;
	}
}
void Compress32(Vec& src_vec, Vec& des_vec, CompressState& compress_state) {
	uint32_t* __restrict in  = 0;
	uint32_t* __restrict out = 0;
	int b                    = 0;

	switch (b) {
	case 1:
		pack_1bit_32simdWidth(in, out);
		break;
	case 2:
		pack_2bit_32simdWidth(in, out);
		break;
	case 3:
		pack_3bit_32simdWidth(in, out);
		break;
	case 4:
		pack_4bit_32simdWidth(in, out);
		break;
	case 5:
		pack_5bit_32simdWidth(in, out);
		break;
	case 6:
		pack_6bit_32simdWidth(in, out);
		break;
	case 7:
		pack_7bit_32simdWidth(in, out);
		break;
	case 8:
		pack_8bit_32simdWidth(in, out);
		break;
	case 9:
		pack_9bit_32simdWidth(in, out);
		break;
	case 10:
		pack_10bit_32simdWidth(in, out);
		break;
	case 11:
		pack_11bit_32simdWidth(in, out);
		break;
	case 12:
		pack_12bit_32simdWidth(in, out);
		break;
	case 13:
		pack_13bit_32simdWidth(in, out);
		break;
	case 14:
		pack_14bit_32simdWidth(in, out);
		break;
	case 15:
		pack_15bit_32simdWidth(in, out);
		break;
	case 16:
		pack_16bit_32simdWidth(in, out);
		break;
	case 17:
		pack_17bit_32simdWidth(in, out);
		break;
	case 18:
		pack_18bit_32simdWidth(in, out);
		break;
	case 19:
		pack_19bit_32simdWidth(in, out);
		break;
	case 20:
		pack_20bit_32simdWidth(in, out);
		break;
	case 21:
		pack_21bit_32simdWidth(in, out);
		break;
	case 22:
		pack_22bit_32simdWidth(in, out);
		break;
	case 23:
		pack_23bit_32simdWidth(in, out);
		break;
	case 24:
		pack_24bit_32simdWidth(in, out);
		break;
	case 25:
		pack_25bit_32simdWidth(in, out);
		break;
	case 26:
		pack_26bit_32simdWidth(in, out);
		break;
	case 27:
		pack_27bit_32simdWidth(in, out);
		break;
	case 28:
		pack_28bit_32simdWidth(in, out);
		break;
	case 29:
		pack_29bit_32simdWidth(in, out);
		break;
	case 30:
		pack_30bit_32simdWidth(in, out);
		break;
	case 31:
		pack_31bit_32simdWidth(in, out);
		break;
	case 32:
		pack_32bit_32simdWidth(in, out);
		break;
	}
}

void Compress64(Vec& src_vec, Vec& des_vec, CompressState& compress_state) {
	//	auto   *bit_col = reinterpret_cast<uint8_t *>(state.col1);
	//	auto    out     = reinterpret_cast<uint64_t *>(state.data);
	//	auto    in      = reinterpret_cast<uint64_t *>(state.data);

	uint8_t   bit_c = 0;
	uint64_t* in    = 0;
	uint64_t* out   = 0;

	switch (bit_c) {
	case 0:
		break;
	case 1:
		pack_1bit_16simdWidth(in, out);
		break;
	case 2:
		pack_2bit_64simdWidth(in, out);
		break;
	case 3:
		pack_3bit_64simdWidth(in, out);
		break;
	case 4:
		pack_4bit_64simdWidth(in, out);
		break;
	case 5:
		pack_5bit_64simdWidth(in, out);
		break;
	case 6:
		pack_6bit_64simdWidth(in, out);
		break;
	case 7:
		pack_7bit_64simdWidth(in, out);
		break;
	case 8:
		pack_8bit_64simdWidth(in, out);
		break;
	case 9:
		pack_9bit_64simdWidth(in, out);
		break;
	case 10:
		pack_10bit_64simdWidth(in, out);
		break;
	case 11:
		pack_11bit_64simdWidth(in, out);
		break;
	case 12:
		pack_12bit_64simdWidth(in, out);
		break;
	case 13:
		pack_13bit_64simdWidth(in, out);
		break;
	case 14:
		pack_14bit_64simdWidth(in, out);
		break;
	case 15:
		pack_15bit_64simdWidth(in, out);
		break;
	case 16:
		pack_16bit_64simdWidth(in, out);
		break;
	case 17:
		pack_17bit_64simdWidth(in, out);
		break;
	case 18:
		pack_18bit_64simdWidth(in, out);
		break;
	case 19:
		pack_19bit_64simdWidth(in, out);
		break;
	case 20:
		pack_20bit_64simdWidth(in, out);
		break;
	case 21:
		pack_21bit_64simdWidth(in, out);
		break;
	case 22:
		pack_22bit_64simdWidth(in, out);
		break;
	case 23:
		pack_23bit_64simdWidth(in, out);
		break;
	case 24:
		pack_24bit_64simdWidth(in, out);
		break;
	case 25:
		pack_25bit_64simdWidth(in, out);
		break;
	case 26:
		pack_26bit_64simdWidth(in, out);
		break;
	case 27:
		pack_27bit_64simdWidth(in, out);
		break;
	case 28:
		pack_28bit_64simdWidth(in, out);
		break;
	case 29:
		pack_29bit_64simdWidth(in, out);
		break;
	case 30:
		pack_30bit_64simdWidth(in, out);
		break;
	case 31:
		pack_31bit_64simdWidth(in, out);
		break;
	case 32:
		pack_32bit_64simdWidth(in, out);
		break;
	case 33:
		pack_33bit_64simdWidth(in, out);
		break;
	case 34:
		pack_34bit_64simdWidth(in, out);
		break;
	case 35:
		pack_35bit_64simdWidth(in, out);
		break;
	case 36:
		pack_36bit_64simdWidth(in, out);
		break;
	case 37:
		pack_37bit_64simdWidth(in, out);
		break;
	case 38:
		pack_38bit_64simdWidth(in, out);
		break;
	case 39:
		pack_39bit_64simdWidth(in, out);
		break;
	case 40:
		pack_40bit_64simdWidth(in, out);
		break;
	case 41:
		pack_41bit_64simdWidth(in, out);
		break;
	case 42:
		pack_42bit_64simdWidth(in, out);
		break;
	case 43:
		pack_43bit_64simdWidth(in, out);
		break;
	case 44:
		pack_44bit_64simdWidth(in, out);
		break;
	case 45:
		pack_45bit_64simdWidth(in, out);
		break;
	case 46:
		pack_46bit_64simdWidth(in, out);
		break;
	case 47:
		pack_47bit_64simdWidth(in, out);
		break;
	case 48:
		pack_48bit_64simdWidth(in, out);
		break;
	case 49:
		pack_49bit_64simdWidth(in, out);
		break;
	case 50:
		pack_50bit_64simdWidth(in, out);
		break;
	case 51:
		pack_51bit_64simdWidth(in, out);
		break;
	case 52:
		pack_52bit_64simdWidth(in, out);
		break;
	case 53:
		pack_53bit_64simdWidth(in, out);
		break;
	case 54:
		pack_54bit_64simdWidth(in, out);
		break;
	case 55:
		pack_55bit_64simdWidth(in, out);
		break;
	case 56:
		pack_56bit_64simdWidth(in, out);
		break;
	case 57:
		pack_57bit_64simdWidth(in, out);
		break;
	case 58:
		pack_58bit_64simdWidth(in, out);
		break;
	case 59:
		pack_59bit_64simdWidth(in, out);
		break;
	case 60:
		pack_60bit_64simdWidth(in, out);
		break;
	case 61:
		pack_61bit_64simdWidth(in, out);
		break;
	case 62:
		pack_62bit_64simdWidth(in, out);
		break;
	case 63:
		pack_63bit_64simdWidth(in, out);
		break;
	case 64:
		pack_64bit_64simdWidth(in, out);
		break;
	}
}
}}; // namespace fastlanes::bitpack
