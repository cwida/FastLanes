#ifndef FAST_LANES_FLS_BENCHMARKS_DELTA_DELTA_HELPER_HPP
#define FAST_LANES_FLS_BENCHMARKS_DELTA_DELTA_HELPER_HPP

#include <immintrin.h>
#include <stdint.h>

namespace manual {
namespace delta {
template <typename T>
void scalar_delta(T* __restrict__ delta, T* __restrict__ out, T* base) {
	auto tmp_register = delta[0] + base[0];
	out[0]            = tmp_register;
	for (int i = 1; i < 1024; i++) {
		tmp_register += delta[i];
		out[i] = tmp_register;
	}
}


void lemire_d1_8(uint8_t* __restrict__ delta, uint8_t* __restrict__ out, uint8_t* base) {
	__m128i tmp;
	__m128i prev;
	auto*   _in  = reinterpret_cast<__m128i*>(delta);
	auto*   _out = reinterpret_cast<__m128i*>(out);
	// i = 0;
	tmp  = _mm_loadu_si128(_in);
	tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 8));
	tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 4));
	tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 2));
	tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 1));
	prev = _mm_add_epi8(tmp, _mm_set1_epi8(*base));
	_mm_storeu_si128(_out, prev);
	for (int i = 1; i < 64; ++i) {
		tmp  = _mm_loadu_si128(_in + i);
		tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 8));
		tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 4));
		tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 2));
		tmp  = _mm_add_epi8(tmp, _mm_slli_si128(tmp, 1));
		prev = _mm_add_epi8(tmp, _mm_set1_epi8(*(out + i * 16 - 1)));
		_mm_storeu_si128(_out + i, prev);
	}
}


void lemire_d1_16(uint16_t* __restrict__ delta, uint16_t* __restrict__ out, uint16_t* base) {
	__m128i tmp;
	__m128i prev;
	auto*   _in  = reinterpret_cast<__m128i*>(delta);
	auto*   _out = reinterpret_cast<__m128i*>(out);
	// i = 0;
	tmp  = _mm_loadu_si128(_in);
	tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 8));
	tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 4));
	tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 2));
	prev = _mm_add_epi16(tmp, _mm_set1_epi16(*base));
	_mm_storeu_si128(_out, prev);
	for (int i = 1; i < 128; ++i) {
		tmp  = _mm_loadu_si128(_in + i);
		tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 8));
		tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 4));
		tmp  = _mm_add_epi16(tmp, _mm_slli_si128(tmp, 2));
		prev = _mm_add_epi16(tmp, _mm_set1_epi16(*(out + i * 8 - 1)));
		_mm_storeu_si128(_out + i, prev);
	}
}

/*---------------------------------------------------------------------------------------------------------------------\
 * lemire_d1_32_set
 *
 * Use _mm_set1_epi32 instead of _mm_shuffle_epi32
 * just for benchmarking purpose
 * performance : 1.76949
 *
 * The original implementation(lemire_d1_32) use _mm_shuffle_epi32. However, _mm_shuffle_epi64 does not exist. Therefore
 , I used one set(_mm_set1_epi64x) and load instruction to simulate _mm_shuffle_epi32.
\---------------------------------------------------------------------------------------------------------------------*/

void lemire_d1_32_set(uint32_t* __restrict__ delta, uint32_t* __restrict__ out, uint32_t* base) {
	__m128i tmp;
	__m128i prev;
	auto*   _in  = reinterpret_cast<__m128i*>(delta);
	auto*   _out = reinterpret_cast<__m128i*>(out);
	// i = 0;
	tmp  = _mm_loadu_si128(_in);
	tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 8));
	tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 4));
	prev = _mm_add_epi32(tmp, _mm_set1_epi32(*base));
	_mm_storeu_si128(_out, prev);
	for (int i = 1; i < 256; ++i) {
		tmp  = _mm_loadu_si128(_in + i);
		tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 8));
		tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 4));
		prev = _mm_add_epi32(tmp,  _mm_set1_epi32(*(out + i * 4 - 1)));
		_mm_storeu_si128(_out + i, prev);
	}
}

void lemire_d1_32(uint32_t* __restrict__ delta, uint32_t* __restrict__ out, uint32_t* base) {
	__m128i tmp;
	__m128i prev;
	auto*   _in  = reinterpret_cast<__m128i*>(delta);
	auto*   _out = reinterpret_cast<__m128i*>(out);
	// i = 0;
	tmp  = _mm_loadu_si128(_in);
	tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 8));
	tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 4));
	prev = _mm_add_epi32(tmp, _mm_set1_epi32(*base));
	_mm_storeu_si128(_out, prev);
	for (int i = 1; i < 256; ++i) {
		tmp  = _mm_loadu_si128(_in + i);
		tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 8));
		tmp  = _mm_add_epi32(tmp, _mm_slli_si128(tmp, 4));
		prev = _mm_add_epi32(tmp, _mm_shuffle_epi32(prev, 0xff));
		_mm_storeu_si128(_out + i, prev);
	}
}


/*---------------------------------------------------------------------------------------------------------------------\
 * lemire_d1_64
 * The original implementation(lemire_d1_32) use _mm_shuffle_epi32. However, _mm_shuffle_epi64 does not exist. Therefore
 , I used one set(_mm_set1_epi64x) and load instruction to simulate _mm_shuffle_epi32.
\---------------------------------------------------------------------------------------------------------------------*/
void lemire_d1_64(uint64_t* __restrict__ delta, uint64_t* __restrict__ out, uint64_t* base) {
	__m128i tmp;
	__m128i prev;
	auto*   _in  = reinterpret_cast<__m128i*>(delta);
	auto*   _out = reinterpret_cast<__m128i*>(out);
	// i = 0;
	tmp  = _mm_loadu_si128(_in);
	tmp  = _mm_add_epi64(tmp, _mm_slli_si128(tmp, 8));
	prev = _mm_add_epi64(tmp, _mm_set1_epi64x(*base));
	_mm_storeu_si128(_out, prev);
	for (int i = 1; i < 512; ++i) {
		tmp  = _mm_loadu_si128(_in + i);
		tmp  = _mm_add_epi64(tmp, _mm_slli_si128(tmp, 8));
		prev = _mm_add_epi64(tmp, _mm_set1_epi64x(*(out + i * 2 - 1)));
		_mm_storeu_si128(_out + i, prev);
	}
}

/*---------------------------------------------------------------------------------------------------------------------\
 * d1_256_32
 * This implementation needs avx512vl at least
 * Also it is as slow as my implementation -> my_avx2_d1
\---------------------------------------------------------------------------------------------------------------------*/
__m256i prefix_sum_32(__m256i x) {
	__m256i ZERO = _mm256_setzero_si256();
	x            = _mm256_add_epi32(x, _mm256_alignr_epi32(x, ZERO, 8 - 1));
	x            = _mm256_add_epi32(x, _mm256_alignr_epi32(x, ZERO, 8 - 2));
	x            = _mm256_add_epi32(x, _mm256_alignr_epi32(x, ZERO, 8 - 4));
	return x; // local prefix sums
}

void avx2_d1(uint32_t* __restrict__ in, uint32_t* __restrict__ out, uint32_t* base) {
	__m256i tmp;
	__m256i prev;
	auto*   _in  = reinterpret_cast<__m256i*>(in);
	auto*   _out = reinterpret_cast<__m256i*>(out);
	// i = 0;
	tmp  = _mm256_loadu_si256(_in);
	prev = _mm256_add_epi32(prefix_sum_32(tmp), _mm256_set1_epi32(*base));
	_mm256_storeu_si256(_out, prev);
	for (int i = 1; i < 128; ++i) {
		tmp  = _mm256_loadu_si256(_in + i);
		prev = _mm256_add_epi32(prefix_sum_32(tmp), _mm256_set1_epi32(*(out + i * 8 - 1)));
		_mm256_storeu_si256(_out + i, prev);
	}
}
/*---------------------------------------------------------------------------------------------------------------------\
 * d1_512_8
 * _mm512_alignr_epi8 is not equivalent of _mm512_alignr_epi32
\---------------------------------------------------------------------------------------------------------------------*/
__m512i prefix_sum_08(__m512i x) {
	__m512i ZERO = _mm512_setzero_si512();
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 1));
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 2));
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 4));
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 8));
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 16));
	x            = _mm512_add_epi8(x, _mm512_alignr_epi8(x, ZERO, 64 - 32));

	return x; // local prefix sums
}

void avx512_d1_08(uint8_t* __restrict__ in, uint8_t* __restrict__ out, uint8_t* base) {
	__m512i  tmp;
	__m512i  prev;
	__m512i* _in  = reinterpret_cast<__m512i*>(in);
	__m512i* _out = reinterpret_cast<__m512i*>(out);
	// i = 0;
	tmp  = _mm512_loadu_si512(_in);
	prev = _mm512_add_epi8(prefix_sum_08(tmp), _mm512_set1_epi8(*base));
	_mm512_storeu_si512(_out, prev);
	for (int i = 1; i < 16; ++i) {
		tmp  = _mm512_loadu_si512(_in + i);
		prev = _mm512_add_epi8(prefix_sum_08(tmp), _mm512_set1_epi8(*(out + i * 64 - 1)));
		_mm512_storeu_si512(_out + i, prev);
	}
}

/*---------------------------------------------------------------------------------------------------------------------\
 * d1_512_16
 * _mm512_alignr_epi16 does not exist!
\---------------------------------------------------------------------------------------------------------------------*/
#if defined(IS__MM512_ALIGNR_EPI16_EXIST)
__m512i prefix_sum_16(__m512i x) {
	__m512i ZERO = _mm512_setzero_si512();
	x            = _mm512_add_epi16(x, _mm512_alignr_epi16(x, ZERO, 32 - 1));
	x            = _mm512_add_epi16(x, _mm512_alignr_epi16(x, ZERO, 32 - 2));
	x            = _mm512_add_epi16(x, _mm512_alignr_epi16(x, ZERO, 32 - 4));
	x            = _mm512_add_epi16(x, _mm512_alignr_epi16(x, ZERO, 32 - 8));
	x            = _mm512_add_epi16(x, _mm512_alignr_epi16(x, ZERO, 32 - 16));

	return x; // local prefix sums
}

void avx512_d1_16(uint16_t* __restrict__ in, uint16_t* __restrict__ out, uint16_t* base) {
	__m512i  tmp;
	__m512i  prev;
	__m512i* _in  = reinterpret_cast<__m512i*>(in);
	__m512i* _out = reinterpret_cast<__m512i*>(out);
	// i = 0;
	tmp  = _mm512_loadu_si512(_in);
	prev = _mm512_add_epi16(prefix_sum_16(tmp), _mm512_set1_epi16(*base));
	_mm512_storeu_si512(_out, prev);
	for (int i = 1; i < 32; ++i) {
		tmp  = _mm512_loadu_si512(_in + i);
		prev = _mm512_add_epi16(prefix_sum_16(tmp), _mm512_set1_epi16(*(out + i * 32 - 1)));
		_mm512_storeu_si512(_out + i, prev);
	}
}
#endif
/*---------------------------------------------------------------------------------------------------------------------\
 * d1_512_32
\---------------------------------------------------------------------------------------------------------------------*/
__m512i prefix_sum_32(__m512i x) {
	__m512i ZERO = _mm512_setzero_si512();
	x            = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 1));
	x            = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 2));
	x            = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 4));
	x            = _mm512_add_epi32(x, _mm512_alignr_epi32(x, ZERO, 16 - 8));
	return x; // local prefix sums
}

void avx512_d1_32(uint32_t* __restrict__ in, uint32_t* __restrict__ out, uint32_t* base) {
	__m512i  tmp;
	__m512i  prev;
	__m512i* _in  = reinterpret_cast<__m512i*>(in);
	__m512i* _out = reinterpret_cast<__m512i*>(out);
	// i = 0;
	tmp  = _mm512_loadu_si512(_in);
	prev = _mm512_add_epi32(prefix_sum_32(tmp), _mm512_set1_epi32(*base));
	_mm512_storeu_si512(_out, prev);
	for (int i = 1; i < 64; ++i) {
		tmp  = _mm512_loadu_si512(_in + i);
		prev = _mm512_add_epi32(prefix_sum_32(tmp), _mm512_set1_epi32(*(out + i * 16 - 1)));
		_mm512_storeu_si512(_out + i, prev);
	}
}

/*---------------------------------------------------------------------------------------------------------------------\
 * d1_512_64
\---------------------------------------------------------------------------------------------------------------------*/
__m512i prefix_sum_64(__m512i x) {
	__m512i ZERO = _mm512_setzero_si512();
	x            = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 1));
	x            = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 2));
	x            = _mm512_add_epi64(x, _mm512_alignr_epi64(x, ZERO, 8 - 4));
	return x; // local prefix sums
}

void avx512_d1_64(uint64_t* __restrict__ in, uint64_t* __restrict__ out, uint64_t* base) {
	__m512i  tmp;
	__m512i  prev;
	__m512i* _in  = reinterpret_cast<__m512i*>(in);
	__m512i* _out = reinterpret_cast<__m512i*>(out);
	// i = 0;
	tmp  = _mm512_loadu_si512(_in);
	prev = _mm512_add_epi64(prefix_sum_64(tmp), _mm512_set1_epi64(*base));
	_mm512_storeu_si512(_out, prev);
	for (int i = 1; i < 128; ++i) {
		tmp  = _mm512_loadu_si512(_in + i);
		prev = _mm512_add_epi64(prefix_sum_64(tmp), _mm512_set1_epi64(*(out + i * 8 - 1)));
		_mm512_storeu_si512(_out + i, prev);
	}
}

/*---------------------------------------------------------------------------------------------------------------------\
 * d1_my_256_32
\---------------------------------------------------------------------------------------------------------------------*/
void my_avx2_d1(uint32_t* __restrict__ in, uint32_t* __restrict__ out, uint32_t* base) {
	__m256i  tmp;
	__m256i  prev;
	__m256i  mask;
	__m256i* _in  = reinterpret_cast<__m256i*>(in);
	__m256i* _out = reinterpret_cast<__m256i*>(out);
	// i = 0;
	tmp  = _mm256_loadu_si256(_in);
	mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
	tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 16));
	mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
	tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 8));
	mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
	tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 4));
	prev = _mm256_add_epi32(tmp, _mm256_set1_epi32(*base));
	_mm256_storeu_si256(_out, prev);
	for (int i = 1; i < 128; ++i) {
		tmp  = _mm256_loadu_si256(_in + i);
		mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
		tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 16));
		mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
		tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 8));
		mask = _mm256_permute2x128_si256(tmp, tmp, _MM_SHUFFLE(0, 0, 3, 0));
		tmp  = _mm256_add_epi32(tmp, _mm256_alignr_epi8(tmp, mask, 16 - 4));
		prev = _mm256_add_epi32(tmp, _mm256_set1_epi32(_mm256_extract_epi32(prev, 7)));
		_mm256_storeu_si256(_out + i, prev);
	}
}

template <typename T>
void four_cursor_delta(T* __restrict__ in, T* __restrict__ out, T* __restrict__ base) {
	T prev1;
	T prev2;
	T prev3;
	T prev4;
	out[0] = prev1 = in[0] + base[0];
	out[256] = prev2 = in[256] + base[1];
	out[512] = prev3 = in[512] + base[2];
	out[768] = prev4 = in[768] + base[3];
	for (int i = 1; i < 256; i++) {
		out[i] = prev1 = prev1 + in[i];
		out[i + 256] = prev2 = prev2 + in[i + 256];
		out[i + 512] = prev3 = prev3 + in[i + 512];
		out[i + 768] = prev4 = prev4 + in[i + 768];
	}
}

} // namespace delta
namespace rle {
void scalar_rle(uint32_t* value, uint32_t* length, uint32_t* output, uint32_t counter) {
	uint32_t length_tmp;
	uint32_t offset = 0;
	for (int i = 0; i < counter; ++i) {
		length_tmp = length[i] + 1;
		for (int j = 0; j < length_tmp; ++j) {
			output[offset + j] = value[i];
		}
		offset += length_tmp;
	}
}

size_t scalar_rle_compress(uint32_t* value, uint32_t* length, uint32_t* input) {
	auto   cur_val {input[0]};
	auto   nex_val {input[1]};
	auto   cur_len {0};
	size_t counter {0};
	for (size_t i {1}; i < 1024; ++i) {
		nex_val = input[i];
		if (cur_val != nex_val) {
			value[counter]  = cur_val;
			length[counter] = cur_len;
			cur_len         = 0;
			cur_val         = input[i];
			counter++;
		} else {
			cur_len++;
		}
	}
	value[counter]  = cur_val;
	length[counter] = cur_len;

	return (counter++);
}

void scalar_rle_decompress(uint32_t* value, uint32_t* length, uint32_t* output) {
	size_t length_tmp {0};
	size_t length_off {0};
	size_t output_off {0};
	while (output_off < 1024) {
		length_tmp = length[length_off] + 1;
		for (int j = 0; j < length_tmp; ++j) {
			output[output_off + j] = value[length_off];
		}
		output_off += length_tmp;
		length_off += 1;
	}
}

} // namespace rle
} // namespace manual
namespace helper {
uint8_t  bases_08[4] {7, 38, 72, 103};
uint16_t bases_16[4] {7, 38, 72, 103};
uint32_t bases_32[4] {7, 38, 72, 103};
uint64_t bases_64[4] {7, 38, 72, 103};

uint8_t array_08[1024] {
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   10,  10,  10,
    10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  12,  12,  12,  12,  12,  12,  12,
    12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,
    18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,
    20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,
    23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,
    27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,
    30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,
    33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,
    35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,
    37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,
    40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  44,
    44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,
    47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,
    50,  50,  50,  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  52,  52,  52,  52,  52,  52,  52,
    52,  52,  52,  52,  53,  53,  53,  54,  54,  54,  54,  54,  54,  54,  55,  55,  55,  55,  55,  55,  55,  55,  55,
    55,  56,  56,  56,  56,  56,  56,  56,  56,  57,  57,  57,  57,  57,  57,  57,  57,  58,  58,  58,  58,  59,  59,
    59,  59,  59,  59,  60,  60,  60,  60,  60,  60,  60,  60,  61,  61,  61,  62,  62,  62,  62,  62,  62,  62,  62,
    62,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,  64,  65,  65,  65,  65,  65,  65,  65,  66,  66,  66,  66,
    66,  66,  66,  67,  67,  67,  67,  67,  67,  67,  67,  68,  68,  68,  68,  68,  68,  68,  68,  69,  69,  69,  69,
    69,  69,  69,  69,  69,  69,  69,  69,  69,  70,  70,  70,  70,  70,  70,  70,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  72,  72,  72,  72,  72,  72,  72,  73,  73,  73,  73,  73,  73,  73,  73,  73,  74,  74,  74,  74,  74,
    74,  74,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  76,  76,  76,  76,  76,  76,  76,  76,
    76,  76,  76,  76,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  78,  78,  78,  78,  79,  79,  79,  79,  79,
    79,  79,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  81,  81,  81,  81,  82,  82,  82,  82,  82,
    82,  83,  83,  83,  83,  83,  83,  83,  84,  84,  84,  84,  84,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,
    85,  85,  85,  85,  85,  86,  86,  86,  86,  86,  86,  86,  86,  86,  87,  87,  87,  87,  87,  87,  87,  87,  88,
    88,  88,  88,  88,  88,  88,  89,  89,  89,  89,  89,  89,  89,  89,  90,  90,  90,  90,  90,  90,  90,  90,  90,
    91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  92,  92,  92,  92,  92,  92,  93,  93,  93,  93,  93,  93,  93,
    93,  94,  94,  94,  94,  94,  94,  94,  94,  94,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  96,  96,  96,
    96,  96,  96,  97,  97,  97,  97,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  99,  99,  99,  99,  99,  99,
    100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
    105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
    110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
    113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
    115, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119,
    119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
    121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124,
    124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
    127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133,
    133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134,
};

uint16_t array_16[1024] {
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   10,  10,  10,
    10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  12,  12,  12,  12,  12,  12,  12,
    12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,
    18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,
    20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,
    23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,
    27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,
    30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,
    33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,
    35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,
    37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,
    40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  44,
    44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,
    47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,
    50,  50,  50,  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  52,  52,  52,  52,  52,  52,  52,
    52,  52,  52,  52,  53,  53,  53,  54,  54,  54,  54,  54,  54,  54,  55,  55,  55,  55,  55,  55,  55,  55,  55,
    55,  56,  56,  56,  56,  56,  56,  56,  56,  57,  57,  57,  57,  57,  57,  57,  57,  58,  58,  58,  58,  59,  59,
    59,  59,  59,  59,  60,  60,  60,  60,  60,  60,  60,  60,  61,  61,  61,  62,  62,  62,  62,  62,  62,  62,  62,
    62,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,  64,  65,  65,  65,  65,  65,  65,  65,  66,  66,  66,  66,
    66,  66,  66,  67,  67,  67,  67,  67,  67,  67,  67,  68,  68,  68,  68,  68,  68,  68,  68,  69,  69,  69,  69,
    69,  69,  69,  69,  69,  69,  69,  69,  69,  70,  70,  70,  70,  70,  70,  70,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  72,  72,  72,  72,  72,  72,  72,  73,  73,  73,  73,  73,  73,  73,  73,  73,  74,  74,  74,  74,  74,
    74,  74,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  76,  76,  76,  76,  76,  76,  76,  76,
    76,  76,  76,  76,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  78,  78,  78,  78,  79,  79,  79,  79,  79,
    79,  79,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  81,  81,  81,  81,  82,  82,  82,  82,  82,
    82,  83,  83,  83,  83,  83,  83,  83,  84,  84,  84,  84,  84,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,
    85,  85,  85,  85,  85,  86,  86,  86,  86,  86,  86,  86,  86,  86,  87,  87,  87,  87,  87,  87,  87,  87,  88,
    88,  88,  88,  88,  88,  88,  89,  89,  89,  89,  89,  89,  89,  89,  90,  90,  90,  90,  90,  90,  90,  90,  90,
    91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  92,  92,  92,  92,  92,  92,  93,  93,  93,  93,  93,  93,  93,
    93,  94,  94,  94,  94,  94,  94,  94,  94,  94,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  96,  96,  96,
    96,  96,  96,  97,  97,  97,  97,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  99,  99,  99,  99,  99,  99,
    100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
    105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
    110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
    113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
    115, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119,
    119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
    121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124,
    124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
    127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133,
    133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134,
};

uint32_t array_32[1024] {
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   10,  10,  10,
    10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  12,  12,  12,  12,  12,  12,  12,
    12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,
    18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,
    20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,
    23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,
    27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,
    30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,
    33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,
    35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,
    37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,
    40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  44,
    44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,
    47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,
    50,  50,  50,  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  52,  52,  52,  52,  52,  52,  52,
    52,  52,  52,  52,  53,  53,  53,  54,  54,  54,  54,  54,  54,  54,  55,  55,  55,  55,  55,  55,  55,  55,  55,
    55,  56,  56,  56,  56,  56,  56,  56,  56,  57,  57,  57,  57,  57,  57,  57,  57,  58,  58,  58,  58,  59,  59,
    59,  59,  59,  59,  60,  60,  60,  60,  60,  60,  60,  60,  61,  61,  61,  62,  62,  62,  62,  62,  62,  62,  62,
    62,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,  64,  65,  65,  65,  65,  65,  65,  65,  66,  66,  66,  66,
    66,  66,  66,  67,  67,  67,  67,  67,  67,  67,  67,  68,  68,  68,  68,  68,  68,  68,  68,  69,  69,  69,  69,
    69,  69,  69,  69,  69,  69,  69,  69,  69,  70,  70,  70,  70,  70,  70,  70,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  72,  72,  72,  72,  72,  72,  72,  73,  73,  73,  73,  73,  73,  73,  73,  73,  74,  74,  74,  74,  74,
    74,  74,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  76,  76,  76,  76,  76,  76,  76,  76,
    76,  76,  76,  76,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  78,  78,  78,  78,  79,  79,  79,  79,  79,
    79,  79,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  81,  81,  81,  81,  82,  82,  82,  82,  82,
    82,  83,  83,  83,  83,  83,  83,  83,  84,  84,  84,  84,  84,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,
    85,  85,  85,  85,  85,  86,  86,  86,  86,  86,  86,  86,  86,  86,  87,  87,  87,  87,  87,  87,  87,  87,  88,
    88,  88,  88,  88,  88,  88,  89,  89,  89,  89,  89,  89,  89,  89,  90,  90,  90,  90,  90,  90,  90,  90,  90,
    91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  92,  92,  92,  92,  92,  92,  93,  93,  93,  93,  93,  93,  93,
    93,  94,  94,  94,  94,  94,  94,  94,  94,  94,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  96,  96,  96,
    96,  96,  96,  97,  97,  97,  97,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  99,  99,  99,  99,  99,  99,
    100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
    105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
    110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
    113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
    115, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119,
    119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
    121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124,
    124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
    127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133,
    133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134,
};

uint64_t array_64[1024] {
    7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   8,   8,   8,   8,   9,   9,   9,   9,   9,   10,  10,  10,
    10,  10,  10,  10,  10,  10,  11,  11,  11,  11,  11,  11,  11,  11,  11,  11,  12,  12,  12,  12,  12,  12,  12,
    12,  12,  12,  13,  13,  13,  13,  13,  13,  13,  14,  14,  14,  14,  14,  14,  15,  15,  15,  15,  15,  15,  15,
    15,  15,  15,  15,  15,  16,  16,  16,  16,  17,  17,  17,  17,  17,  17,  18,  18,  18,  18,  18,  18,  18,  18,
    18,  18,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  19,  20,  20,  20,  20,  20,  20,
    20,  20,  21,  21,  21,  21,  21,  21,  21,  21,  21,  21,  22,  22,  22,  22,  22,  22,  22,  22,  22,  22,  23,
    23,  23,  23,  23,  23,  23,  23,  23,  23,  24,  24,  25,  25,  25,  26,  26,  26,  26,  27,  27,  27,  27,  27,
    27,  27,  27,  27,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  28,  29,  29,  29,  29,  29,  29,  29,  29,
    30,  30,  30,  30,  30,  30,  31,  31,  31,  31,  31,  31,  31,  31,  31,  32,  32,  32,  32,  32,  32,  32,  32,
    33,  33,  33,  33,  33,  33,  33,  33,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  34,  35,
    35,  35,  35,  35,  35,  35,  35,  36,  36,  36,  36,  36,  36,  36,  36,  36,  36,  37,  37,  37,  37,  37,  37,
    37,  38,  38,  38,  38,  38,  38,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  39,  40,  40,  40,  40,  40,
    40,  40,  40,  41,  41,  41,  41,  41,  41,  42,  42,  42,  42,  42,  43,  43,  43,  43,  43,  43,  43,  43,  44,
    44,  44,  44,  45,  45,  45,  45,  45,  45,  45,  46,  46,  46,  46,  46,  46,  46,  46,  46,  47,  47,  47,  47,
    47,  47,  47,  47,  47,  47,  47,  47,  48,  48,  48,  48,  48,  48,  48,  48,  48,  49,  49,  49,  49,  49,  49,
    50,  50,  50,  50,  50,  50,  50,  50,  50,  51,  51,  51,  51,  51,  51,  51,  52,  52,  52,  52,  52,  52,  52,
    52,  52,  52,  52,  53,  53,  53,  54,  54,  54,  54,  54,  54,  54,  55,  55,  55,  55,  55,  55,  55,  55,  55,
    55,  56,  56,  56,  56,  56,  56,  56,  56,  57,  57,  57,  57,  57,  57,  57,  57,  58,  58,  58,  58,  59,  59,
    59,  59,  59,  59,  60,  60,  60,  60,  60,  60,  60,  60,  61,  61,  61,  62,  62,  62,  62,  62,  62,  62,  62,
    62,  63,  63,  63,  64,  64,  64,  64,  64,  64,  64,  64,  65,  65,  65,  65,  65,  65,  65,  66,  66,  66,  66,
    66,  66,  66,  67,  67,  67,  67,  67,  67,  67,  67,  68,  68,  68,  68,  68,  68,  68,  68,  69,  69,  69,  69,
    69,  69,  69,  69,  69,  69,  69,  69,  69,  70,  70,  70,  70,  70,  70,  70,  71,  71,  71,  71,  71,  71,  71,
    71,  71,  72,  72,  72,  72,  72,  72,  72,  73,  73,  73,  73,  73,  73,  73,  73,  73,  74,  74,  74,  74,  74,
    74,  74,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  75,  76,  76,  76,  76,  76,  76,  76,  76,
    76,  76,  76,  76,  77,  77,  77,  77,  77,  77,  77,  77,  77,  77,  78,  78,  78,  78,  79,  79,  79,  79,  79,
    79,  79,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  81,  81,  81,  81,  82,  82,  82,  82,  82,
    82,  83,  83,  83,  83,  83,  83,  83,  84,  84,  84,  84,  84,  85,  85,  85,  85,  85,  85,  85,  85,  85,  85,
    85,  85,  85,  85,  85,  86,  86,  86,  86,  86,  86,  86,  86,  86,  87,  87,  87,  87,  87,  87,  87,  87,  88,
    88,  88,  88,  88,  88,  88,  89,  89,  89,  89,  89,  89,  89,  89,  90,  90,  90,  90,  90,  90,  90,  90,  90,
    91,  91,  91,  91,  91,  91,  91,  91,  91,  91,  92,  92,  92,  92,  92,  92,  93,  93,  93,  93,  93,  93,  93,
    93,  94,  94,  94,  94,  94,  94,  94,  94,  94,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  96,  96,  96,
    96,  96,  96,  97,  97,  97,  97,  98,  98,  98,  98,  98,  98,  98,  98,  98,  98,  99,  99,  99,  99,  99,  99,
    100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102,
    102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105,
    105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 108, 108, 108,
    108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110,
    110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113,
    113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115,
    115, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119,
    119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121,
    121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 123, 124, 124,
    124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
    127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129,
    129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 133,
    133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134,
};

uint8_t delta_08[1024] {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};

uint16_t delta_16[1024] {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};

uint32_t delta_32[1024] {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};

uint64_t delta_64[1024] {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0,
    1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
};

} // namespace helper
#endif
