#include "fls_gen/rsum/rsum.hpp"
#include "fls_gen/macros.hpp"
namespace generated
{
	namespace rsum::fallback
	{
		namespace unit64
		{
			void rsum(const uint8_t *__restrict a_in_p, uint8_t* __restrict a_out_p, const uint8_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = reinterpret_cast<uint64_t *>(a_out_p);
				[[maybe_unused]] const auto in = reinterpret_cast<const uint64_t *>(a_in_p);
				[[maybe_unused]] const auto base = reinterpret_cast<const uint64_t *>(a_base_p);
				[[maybe_unused]] uint64_t register_0;
				[[maybe_unused]] uint64_t tmp_0;
				[[maybe_unused]] uint64_t base_0;
				for(int i = 0; i < 16; ++i)
				{
					register_0 = *(in + (0 * 16) + (i * 1) + 0);
					tmp_0 = *(base + (0 * 16) + (i * 1));
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 0] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 16);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 16] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 32);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 32] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 48);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 48] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 64);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 64] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 80);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 80] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 96);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 96] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 112);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 112] = tmp_0;
				}
			}
			void rsum(const uint16_t *__restrict a_in_p, uint16_t* __restrict a_out_p, const uint16_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = reinterpret_cast<uint64_t *>(a_out_p);
				[[maybe_unused]] const auto in = reinterpret_cast<const uint64_t *>(a_in_p);
				[[maybe_unused]] const auto base = reinterpret_cast<const uint64_t *>(a_base_p);
				[[maybe_unused]] uint64_t register_0;
				[[maybe_unused]] uint64_t tmp_0;
				[[maybe_unused]] uint64_t base_0;
				for(int i = 0; i < 16; ++i)
				{
					register_0 = *(in + (0 * 16) + (i * 1) + 0);
					tmp_0 = *(base + (0 * 16) + (i * 1));
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 0] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 32);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 32] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 64);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 64] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 96);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 96] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 128);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 128] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 160);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 160] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 192);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 192] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 224);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 224] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 16);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 16] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 48);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 48] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 80);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 80] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 112);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 112] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 144);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 144] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 176);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 176] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 208);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 208] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 240);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 240] = tmp_0;
				}
			}
			void rsum(const uint32_t *__restrict a_in_p, uint32_t* __restrict a_out_p, const uint32_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = reinterpret_cast<uint64_t *>(a_out_p);
				[[maybe_unused]] const auto in = reinterpret_cast<const uint64_t *>(a_in_p);
				[[maybe_unused]] const auto base = reinterpret_cast<const uint64_t *>(a_base_p);
				[[maybe_unused]] uint64_t register_0;
				[[maybe_unused]] uint64_t tmp_0;
				[[maybe_unused]] uint64_t base_0;
				for(int i = 0; i < 16; ++i)
				{
					register_0 = *(in + (0 * 16) + (i * 1) + 0);
					tmp_0 = *(base + (0 * 16) + (i * 1));
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 0] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 64);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 64] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 128);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 128] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 192);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 192] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 256);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 256] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 320);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 320] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 384);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 384] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 448);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 448] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 32);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 32] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 96);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 96] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 160);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 160] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 224);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 224] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 288);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 288] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 352);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 352] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 416);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 416] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 480);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 480] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 16);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 16] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 80);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 80] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 144);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 144] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 208);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 208] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 272);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 272] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 336);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 336] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 400);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 400] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 464);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 464] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 48);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 48] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 112);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 112] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 176);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 176] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 240);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 240] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 304);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 304] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 368);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 368] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 432);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 432] = tmp_0;
					register_0 = *(in + (0 * 16) + (i * 1) + 496);
					tmp_0 = tmp_0 + register_0;
					out[(i * 1) + (0 * 16) + 496] = tmp_0;
				}
			}
            void rsum(const uint64_t *__restrict a_in_p, uint64_t* __restrict a_out_p, const uint64_t* __restrict a_base_p)
            {
	            [[maybe_unused]] auto out = reinterpret_cast<uint64_t *>(a_out_p);
	            [[maybe_unused]] const auto in = reinterpret_cast<const uint64_t *>(a_in_p);
	            [[maybe_unused]] uint64_t register_0;
	            [[maybe_unused]] uint64_t tmp_0;
	            [[maybe_unused]] uint64_t base_0;
	            for(int i = 0; i < 16; ++i)
	            {
		            register_0 = *(in + (0 * 16) + (i * 1) + 0);
		            tmp_0 = *(a_base_p + (0 * 16) + (i * 1));
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 0] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 128);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 128] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 256);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 256] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 384);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 384] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 512);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 512] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 640);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 640] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 768);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 768] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 896);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 896] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 64);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 64] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 192);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 192] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 320);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 320] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 448);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 448] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 576);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 576] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 704);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 704] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 832);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 832] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 960);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 960] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 32);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 32] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 160);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 160] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 288);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 288] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 416);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 416] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 544);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 544] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 672);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 672] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 800);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 800] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 928);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 928] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 96);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 96] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 224);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 224] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 352);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 352] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 480);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 480] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 608);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 608] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 736);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 736] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 864);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 864] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 992);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 992] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 16);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 16] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 144);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 144] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 272);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 272] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 400);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 400] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 528);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 528] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 656);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 656] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 784);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 784] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 912);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 912] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 80);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 80] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 208);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 208] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 336);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 336] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 464);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 464] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 592);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 592] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 720);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 720] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 848);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 848] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 976);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 976] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 48);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 48] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 176);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 176] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 304);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 304] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 432);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 432] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 560);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 560] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 688);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 688] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 816);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 816] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 944);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 944] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 112);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 112] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 240);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 240] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 368);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 368] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 496);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 496] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 624);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 624] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 752);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 752] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 880);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 880] = tmp_0;
		            register_0 = *(in + (0 * 16) + (i * 1) + 1008);
		            tmp_0 = tmp_0 + register_0;
		            out[(i * 1) + (0 * 16) + 1008] = tmp_0;
	            }
            }
        }
    }
}
