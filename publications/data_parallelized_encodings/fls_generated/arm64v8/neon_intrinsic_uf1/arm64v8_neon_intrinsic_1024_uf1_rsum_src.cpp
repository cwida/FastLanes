#include "fls_gen/rsum/rsum.hpp"
#include "fls_gen/macros.hpp"
#include <arm_neon.h>
namespace generated
{
	namespace rsum::arm64v8
	{
		namespace neon
		{
			void rsum(const uint8_t *__restrict a_in_p, uint8_t* __restrict a_out_p, const uint8_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = (a_out_p);
				[[maybe_unused]] const auto in = (a_in_p);
				[[maybe_unused]] const auto base = (a_base_p);
				[[maybe_unused]] uint8x16_t register_0;
				[[maybe_unused]] uint8x16_t tmp_0;
				[[maybe_unused]] uint8x16_t base_0;
				for(int i = 0; i < 8; ++i)
				{
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 0);
					tmp_0 = vld1q_u8(base + (0 * 8 * 16) + (i * 16));
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 0, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 128);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 128, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 256);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 256, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 384);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 384, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 512);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 512, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 640);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 640, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 768);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 768, tmp_0);
					register_0 = vld1q_u8(in + (0 * 8 * 16) + (i * 16) + 896);
					tmp_0 = tmp_0 + register_0;
					vst1q_u8(out + (i * 16) + (0 * 8 * 16) + 896, tmp_0);
				}
			}
			void rsum(const uint16_t *__restrict a_in_p, uint16_t* __restrict a_out_p, const uint16_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = (a_out_p);
				[[maybe_unused]] const auto in = (a_in_p);
				[[maybe_unused]] const auto base = (a_base_p);
				[[maybe_unused]] uint16x8_t register_0;
				[[maybe_unused]] uint16x8_t tmp_0;
				[[maybe_unused]] uint16x8_t base_0;
				for(int i = 0; i < 8; ++i)
				{
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 0);
					tmp_0 = vld1q_u16(base + (0 * 8 * 8) + (i * 8));
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 0, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 128);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 128, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 256);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 256, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 384);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 384, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 512);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 512, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 640);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 640, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 768);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 768, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 896);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 896, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 64);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 64, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 192);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 192, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 320);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 320, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 448);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 448, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 576);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 576, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 704);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 704, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 832);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 832, tmp_0);
					register_0 = vld1q_u16(in + (0 * 8 * 8) + (i * 8) + 960);
					tmp_0 = tmp_0 + register_0;
					vst1q_u16(out + (i * 8) + (0 * 8 * 8) + 960, tmp_0);
				}
			}
			void rsum(const uint32_t *__restrict a_in_p, uint32_t* __restrict a_out_p, const uint32_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = (a_out_p);
				[[maybe_unused]] const auto in = (a_in_p);
				[[maybe_unused]] const auto base = (a_base_p);
				[[maybe_unused]] uint32x4_t register_0;
				[[maybe_unused]] uint32x4_t tmp_0;
				[[maybe_unused]] uint32x4_t base_0;
				for(int i = 0; i < 8; ++i)
				{
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 0);
					tmp_0 = vld1q_u32(base + (0 * 8 * 4) + (i * 4));
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 0, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 128);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 128, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 256);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 256, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 384);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 384, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 512);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 512, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 640);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 640, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 768);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 768, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 896);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 896, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 64);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 64, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 192);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 192, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 320);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 320, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 448);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 448, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 576);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 576, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 704);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 704, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 832);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 832, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 960);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 960, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 32);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 32, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 160);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 160, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 288);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 288, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 416);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 416, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 544);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 544, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 672);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 672, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 800);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 800, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 928);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 928, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 96);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 96, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 224);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 224, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 352);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 352, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 480);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 480, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 608);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 608, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 736);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 736, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 864);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 864, tmp_0);
					register_0 = vld1q_u32(in + (0 * 8 * 4) + (i * 4) + 992);
					tmp_0 = tmp_0 + register_0;
					vst1q_u32(out + (i * 4) + (0 * 8 * 4) + 992, tmp_0);
				}
			}
			void rsum(const uint64_t *__restrict a_in_p, uint64_t* __restrict a_out_p, const uint64_t* __restrict a_base_p)
			{
				[[maybe_unused]] auto out = (a_out_p);
				[[maybe_unused]] const auto in = (a_in_p);
				[[maybe_unused]] const auto base = (a_base_p);
				[[maybe_unused]] uint64x2_t register_0;
				[[maybe_unused]] uint64x2_t tmp_0;
				[[maybe_unused]] uint64x2_t base_0;
				for(int i = 0; i < 8; ++i)
				{
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 0);
					tmp_0 = vld1q_u64(base + (0 * 8 * 2) + (i * 2));
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 0, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 128);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 128, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 256);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 256, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 384);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 384, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 512);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 512, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 640);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 640, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 768);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 768, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 896);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 896, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 64);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 64, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 192);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 192, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 320);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 320, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 448);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 448, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 576);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 576, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 704);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 704, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 832);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 832, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 960);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 960, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 32);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 32, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 160);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 160, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 288);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 288, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 416);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 416, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 544);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 544, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 672);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 672, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 800);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 800, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 928);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 928, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 96);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 96, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 224);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 224, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 352);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 352, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 480);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 480, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 608);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 608, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 736);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 736, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 864);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 864, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 992);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 992, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 16);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 16, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 144);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 144, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 272);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 272, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 400);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 400, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 528);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 528, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 656);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 656, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 784);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 784, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 912);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 912, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 80);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 80, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 208);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 208, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 336);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 336, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 464);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 464, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 592);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 592, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 720);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 720, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 848);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 848, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 976);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 976, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 48);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 48, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 176);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 176, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 304);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 304, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 432);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 432, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 560);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 560, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 688);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 688, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 816);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 816, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 944);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 944, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 112);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 112, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 240);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 240, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 368);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 368, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 496);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 496, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 624);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 624, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 752);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 752, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 880);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 880, tmp_0);
					register_0 = vld1q_u64(in + (0 * 8 * 2) + (i * 2) + 1008);
					tmp_0 = tmp_0 + register_0;
					vst1q_u64(out + (i * 2) + (0 * 8 * 2) + 1008, tmp_0);
				}
			}
		}
	}
}
